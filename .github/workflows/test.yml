name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint
        
      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check
        
      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm run test:ci
        
      - name: Run frontend integration tests
        working-directory: ./frontend
        run: npm run test:integration
        
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
        
      - name: Run frontend E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          
      - name: Run backend linting
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 . --exclude=venv --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --exclude=venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run backend type checking
        working-directory: ./backend
        run: |
          pip install mypy
          mypy . --ignore-missing-imports --no-strict-optional
          
      - name: Run backend unit tests
        working-directory: ./backend
        run: |
          pytest tests/ -v --tb=short -m "not integration and not slow" --cov=backend --cov-report=xml --cov-report=term
          
      - name: Run backend integration tests
        working-directory: ./backend
        run: |
          pytest tests/ -v --tb=short -m "integration" --cov=backend --cov-append --cov-report=xml --cov-report=term
          
      - name: Run backend security tests
        working-directory: ./backend
        run: |
          pytest tests/security/ -v --tb=short --cov=backend --cov-append --cov-report=xml --cov-report=term
          
      - name: Run backend performance tests
        working-directory: ./backend
        run: |
          pytest tests/performance/ -v --tb=short -m "not slow" --cov=backend --cov-append --cov-report=xml --cov-report=term
          
      - name: Run AI module tests
        working-directory: ./backend
        run: |
          pytest tests/ai/ -v --tb=short --cov=backend --cov-append --cov-report=xml --cov-report=term
          
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Bandit security linter
        working-directory: ./backend
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: backend/bandit-report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install locust
          
      - name: Start backend server
        working-directory: ./backend
        run: |
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Run load tests
        working-directory: ./backend
        run: |
          locust -f tests/load/load_test_api.py --host=http://localhost:8000 --headless -u 10 -r 2 -t 30s --html=load-test-report.html
          
      - name: Upload load test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-report
          path: backend/load-test-report.html

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan, performance-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate test summary
        run: |
          echo "# Test Execution Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Frontend Tests" >> test-summary.md
          echo "- Unit Tests: ${{ needs.frontend-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.frontend-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.frontend-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Backend Tests" >> test-summary.md
          echo "- Unit Tests: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "- Security Tests: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "- AI Module Tests: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Security Scan" >> test-summary.md
          echo "- Vulnerability Scan: ${{ needs.security-scan.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Performance Tests" >> test-summary.md
          echo "- Load Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
          
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Notify on success
        if: needs.test-summary.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          
      - name: Notify on failure
        if: needs.test-summary.result == 'failure'
        run: |
          echo "❌ Some tests failed. Please check the logs."
