name: The Shandi CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after tests pass'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  # Frontend Linting
  frontend-lint:
    name: Frontend Linting (ESLint)
    uses: ./.github/workflows/frontend-lint.yml
    with:
      node-version: '18'

  # Frontend Type Checking
  frontend-type-check:
    name: Frontend Type Checking
    uses: ./.github/workflows/frontend-type-check.yml
    with:
      node-version: '18'

  # Frontend Testing
  frontend-test:
    name: Frontend Tests (Jest)
    uses: ./.github/workflows/frontend-test.yml
    with:
      node-version: '18'

  # Frontend Integration Tests
  frontend-integration-test:
    name: Frontend Integration Tests
    uses: ./.github/workflows/frontend-integration-test.yml
    with:
      node-version: '18'

  # Frontend E2E Tests
  frontend-e2e:
    name: Frontend E2E Tests (Playwright)
    uses: ./.github/workflows/frontend-e2e.yml
    with:
      node-version: '18'
    needs: [frontend-lint, frontend-type-check]

  # Backend Python Tests
  backend-test:
    name: Backend Tests (Python)
    uses: ./.github/workflows/backend-test.yml
    with:
      python-version: '3.11'

  # Backend Linting
  backend-lint:
    name: Backend Linting (Flake8)
    uses: ./.github/workflows/backend-lint.yml
    with:
      python-version: '3.11'

  # Security Analysis
  security-analysis:
    name: Security Analysis
    uses: ./.github/workflows/security-analysis.yml

  # Responsive Design Testing
  responsive-design-test:
    name: Responsive Design Testing
    uses: ./.github/workflows/responsive-design-test.yml
    with:
      node-version: '18'

  # Langfuse Integration Testing
  langfuse-integration-test:
    name: Langfuse Integration Testing
    uses: ./.github/workflows/langfuse-integration-test.yml

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    uses: ./.github/workflows/docker-build.yml
    needs: [frontend-lint, frontend-type-check, frontend-test, backend-test, backend-lint, responsive-design-test, langfuse-integration-test]

  # Build Frontend Application
  build-frontend:
    name: Build Frontend Application
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-type-check, frontend-test, security-analysis, responsive-design-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
      
    - name: Build frontend application
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Deploy to Vercel (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./frontend

  # Deploy to Vercel (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-frontend]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./frontend

  # Summary
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-type-check, frontend-test, frontend-integration-test, frontend-e2e, backend-test, backend-lint, security-analysis, responsive-design-test, langfuse-integration-test, docker-build, build-frontend]
    if: always()
    
    steps:
    - name: Pipeline Summary
      run: |
        echo "âœ… The Shandi CI/CD Pipeline Summary"
        echo "Frontend Lint: ${{ needs.frontend-lint.result }}"
        echo "Frontend Type Check: ${{ needs.frontend-type-check.result }}"
        echo "Frontend Test: ${{ needs.frontend-test.result }}"
        echo "Frontend Integration Test: ${{ needs.frontend-integration-test.result }}"
        echo "Frontend E2E: ${{ needs.frontend-e2e.result }}"
        echo "Backend Test: ${{ needs.backend-test.result }}"
        echo "Backend Lint: ${{ needs.backend-lint.result }}"
        echo "Security Analysis: ${{ needs.security-analysis.result }}"
        echo "Responsive Design Test: ${{ needs.responsive-design-test.result }}"
        echo "Langfuse Integration Test: ${{ needs.langfuse-integration-test.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Build Frontend: ${{ needs.build-frontend.result }}"
