# Buffr Host Backend Docker Compose
# Complete development and production environment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: buffr_postgres
    environment:
      POSTGRES_DB: buffr_host
      POSTGRES_USER: buffr_user
      POSTGRES_PASSWORD: buffr_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - buffr_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U buffr_user -d buffr_host"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: buffr_redis
    command: redis-server --appendonly yes --requirepass buffr_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - buffr_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Buffr Host Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: buffr_api
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://buffr_user:buffr_password@postgres:5432/buffr_host
      - REDIS_URL=redis://:buffr_redis_password@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - buffr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development API (with hot reload)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: buffr_api_dev
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://buffr_user:buffr_password@postgres:5432/buffr_host
      - REDIS_URL=redis://:buffr_redis_password@redis:6379/0
      - SECRET_KEY=dev-secret-key
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - buffr_network
    profiles:
      - dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: buffr_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - buffr_network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: buffr_celery_worker
    command: celery -A main.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://buffr_user:buffr_password@postgres:5432/buffr_host
      - REDIS_URL=redis://:buffr_redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:buffr_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:buffr_redis_password@redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - buffr_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: buffr_celery_beat
    command: celery -A main.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://buffr_user:buffr_password@postgres:5432/buffr_host
      - REDIS_URL=redis://:buffr_redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:buffr_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:buffr_redis_password@redis:6379/2
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - buffr_network
    restart: unless-stopped
    profiles:
      - production

  # Flower (Celery monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: buffr_flower
    command: celery -A main.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:buffr_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:buffr_redis_password@redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - buffr_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus (Metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: buffr_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - buffr_network
    profiles:
      - monitoring

  # Grafana (Metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: buffr_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - buffr_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  buffr_network:
    driver: bridge