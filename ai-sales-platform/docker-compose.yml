# AI-Powered Sales Solutions Platform
# Enhanced Docker Compose Configuration (v2.1.0)
# Based on Buffr Host Architecture

version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    depends_on:
      - auth-service
      - ai-service
      - sales-service
      - communication-service
      - customer-service
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service
  auth-service:
    build: ./auth-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@auth-db:5432/auth_service
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - ENVIRONMENT=production
    depends_on:
      - auth-db
      - redis
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sales Service
  sales-service:
    build: ./sales-service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@sales-db:5432/sales_service
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    depends_on:
      - sales-db
      - redis
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service (Enhanced)
  ai-service:
    build: ./ai-service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@ai-db:5432/sales_ai
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ARCADE_API_KEY=${ARCADE_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - WORKERS=4
    depends_on:
      - ai-db
      - redis
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Communication Service
  communication-service:
    build: ./communication-service
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@comm-db:5432/communication_service
      - REDIS_URL=redis://redis:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - ENVIRONMENT=production
    depends_on:
      - comm-db
      - redis
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Customer Service
  customer-service:
    build: ./customer-service
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@customer-db:5432/customer_service
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    depends_on:
      - customer-db
      - redis
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Enhanced Configuration)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Database (Enhanced)
  ai-db:
    image: pgvector/pgvector:pg15
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=sales_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - ai_db_data:/var/lib/postgresql/data
      - ./sql/ai_schema.sql:/docker-entrypoint-initdb.d/01-ai_schema.sql
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sales_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Database
  auth-db:
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=auth_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./sql/auth_schema.sql:/docker-entrypoint-initdb.d/01-auth_schema.sql
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_service"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sales Database
  sales-db:
    image: postgres:15-alpine
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=sales_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - sales_db_data:/var/lib/postgresql/data
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sales_service"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Communication Database
  comm-db:
    image: postgres:15-alpine
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_DB=communication_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - comm_db_data:/var/lib/postgresql/data
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d communication_service"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Customer Database
  customer-db:
    image: postgres:15-alpine
    ports:
      - "5437:5432"
    environment:
      - POSTGRES_DB=customer_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - customer_db_data:/var/lib/postgresql/data
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d customer_service"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      - api-gateway
    networks:
      - sales-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sales-network
    restart: unless-stopped

  # Monitoring (Grafana)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sales-network
    restart: unless-stopped

volumes:
  ai_db_data:
  auth_db_data:
  sales_db_data:
  comm_db_data:
  customer_db_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  sales-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
